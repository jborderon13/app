# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1619Eb7N9H-kFn6Yxpu2BXVAcA782Xz5d
"""

import streamlit as st
import numpy as np
import pickle
import matplotlib.pyplot as plt

# Charger le mod√®le
with open("modele.pkl", "rb") as f:
    model = pickle.load(f)

st.title("üìà Courbe G/Gmax en fonction de Œ≥ (%)")
st.markdown("Entrez vos param√®tres de sol pour g√©n√©rer la courbe G/Gmax.")

# ================================
# Param√®tres d'entr√©e num√©riques
# ================================
PI = st.number_input("PI", value=20.0)
W = st.number_input("W", value=0.0)
Wl = st.number_input("Wl", value=0.0)
Z = st.number_input("Z (m)", value=0.0)
e0 = st.number_input("e0", value=0.0)
rho = st.number_input("œÅ (t/m3)", value=0.0)
sigma = st.number_input("œÉ (kpa)", value=0.0)

# ================================
# S√©lection de la classe USCS
# ================================
uscs = st.selectbox(
    "Classe USCS",
    ["CH", "CH-CL", "CL", "CL-CH", "CL-ML", "MH", "MH-OH", "ML", "ML-OL"]
)

# Encodage one-hot
USCS_CH = 1 if uscs == "CH" else 0
USCS_CH_CL = 1 if uscs == "CH-CL" else 0
USCS_CL = 1 if uscs == "CL" else 0
USCS_CL_CH = 1 if uscs == "CL-CH" else 0
USCS_CL_ML = 1 if uscs == "CL-ML" else 0
USCS_MH = 1 if uscs == "MH" else 0
USCS_MH_OH = 1 if uscs == "MH-OH" else 0
USCS_ML = 1 if uscs == "ML" else 0
USCS_ML_OL = 1 if uscs == "ML-OL" else 0

# ================================
# Plage de gamma (%)
# ================================
gamma_min = st.number_input("Œ≥ min (%)", value=0.01)
gamma_max = st.number_input("Œ≥ max (%)", value=1.0)
n_points = st.slider("Nombre de points", min_value=10, max_value=200, value=50)

# ================================
# Calcul et trac√©
# ================================
if st.button("G√©n√©rer la courbe"):
    gammas = np.linspace(gamma_min, gamma_max, n_points)

    X = []
    for g in gammas:
        features = [PI, USCS_CH, USCS_CH_CL, USCS_CL, USCS_CL_CH,
                    USCS_CL_ML, USCS_MH, USCS_MH_OH, USCS_ML, USCS_ML_OL,
                    W, Wl, Z, e0, rho, sigma, g]
        X.append(features)

    X = np.array(X)
    y_pred = model.predict(X)

    fig, ax = plt.subplots()
    ax.plot(gammas, y_pred, label="G/Gmax", color="blue")
    ax.set_xlabel("Œ≥ (%)")
    ax.set_ylabel("G/Gmax")
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)